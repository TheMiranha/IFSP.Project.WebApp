generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Profile {
  id      String @id @default(uuid())
  clerkId String @unique

  profileRooms ProfileRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileRoom {
  id     String   @id @default(uuid())
  wallet Int
  role   ROOMROLE

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  items ProfileRoomItem[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teamProfile TeamProfile[]
}

model ProfileRoomItem {
  id String @id @default(uuid())

  profileRoom   ProfileRoom? @relation(fields: [profileRoomId], references: [id])
  profileRoomId String?

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id       String @id @default(uuid())
  price    Float
  imageUrl String

  type       EItem
  attributes Attribute[]

  profileRoomItems ProfileRoomItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribute {
  id String @id @default(uuid())

  coeficient Float
  attribute  EAttribute

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EItem {
  SWORD
  BOW
}

enum EAttribute {
  SPEED
  PHYSICAL_DAMAGE
}

model Room {
  id               String  @id @default(uuid())
  name             String
  description      String
  iconName         String
  shareCode        String
  disableShareCode Boolean @default(false)

  profilesRoom ProfileRoom[]
  teams        Team[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id          String @id @default(uuid())
  name        String
  description String
  iconName    String

  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  members TeamProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamProfile {
  id   String   @id @default(uuid())
  role TEAMROLE

  profileRoomId String
  profileRoom   ProfileRoom @relation(fields: [profileRoomId], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROOMROLE {
  MEMBER
  OWNER
}

enum TEAMROLE {
  MEMBER
  LEADER
  OWNER
}
